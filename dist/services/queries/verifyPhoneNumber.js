"use strict";var s=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var c=(e,t)=>{for(var o in t)s(e,o,{get:t[o],enumerable:!0})},d=(e,t,o,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of N(t))!P.call(e,r)&&r!==o&&s(e,r,{get:()=>t[r],enumerable:!(i=b(t,r))||i.enumerable});return e};var C=e=>d(s({},"__esModule",{value:!0}),e);var h=(e,t,o)=>new Promise((i,r)=>{var u=n=>{try{a(o.next(n))}catch(m){r(m)}},f=n=>{try{a(o.throw(n))}catch(m){r(m)}},a=n=>n.done?i(n.value):Promise.resolve(n.value).then(u,f);a((o=o.apply(e,t)).next())});var v={};c(v,{useVerifyPhoneNumber:()=>M});module.exports=C(v);var p=require("@tanstack/react-query"),y=require("graphql-request");var g=y.gql`
  mutation verifyPhoneNumber($countryCode: String, phoneNumber: String, authCode: String) {
    verifyPhoneNumber(countryCode: $countryCode, phoneNumber: $phoneNumber, authCode: $authCode)
  }
`,M=(e,{countryCode:t,phoneNumber:o,authCode:i})=>(0,p.useMutation)({mutationFn:()=>h(void 0,null,function*(){let r=yield e();if(!r)return null;let{verifyPhoneNumber:u}=yield r.request(g,{countryCode:t,phoneNumber:o,authCode:i});return u})});0&&(module.exports={useVerifyPhoneNumber});
